import React, { useState, useEffect, useRef } from 'react';
import Confetti from 'react-confetti';
import './ConfessionPage.css'; // ƒê·∫£m b·∫£o b·∫°n c√≥ file CSS n√†y

// --- N·ªòI DUNG T√ôY CH·ªàNH ---
const OPENING_LINES = [
  "Ch√†o C·∫≠u, c√¥ b√© c·ªßa t·ªõ...",
  "H√¥m nay l√† m·ªôt ng√†y ƒë·∫∑c bi·ªát V√† T·ªõ c√≥ ƒëi·ªÅu n√†y mu·ªën n√≥i v·ªõi C·∫≠u...."
];

// D√πng template literal (d·∫•u `) ƒë·ªÉ d·ªÖ xu·ªëng d√≤ng cho th∆∞
const WISHES = [
  `Nh·ªØng l·ªùi n√†y ƒë√°ng l·∫Ω 20/10 t·ªõ m·ªõi n√≥i v·ªõi c·∫≠u c∆° nh∆∞ng m√† h√¥m b·ªØa v√¨ nghe theo con tim n√™n T·ªõ ƒë√£ n√≥i cho C·∫≠u nghe r·ªìi >.< , T·ªõ bi·∫øt l√† C·∫≠u h√¥m ƒë·∫•y s·∫Ω r·∫•t l√† kh√≥ x·ª≠ v√† b·∫•t ng·ªù ƒë√∫ng kh√¥ng nh·ªâ üòÅ nh∆∞ng ch·∫Øc h·∫≥n nhi·ªÅu nh·∫•t v·∫´n l√† ch∆∞a ch·∫•p nh·∫≠n n·ªïi ƒë√∫ng kh√¥ng.
  
  Nh∆∞ng m√† T·ªõ v·∫´n mu·ªën tr·∫£i l√≤ng m√¨nh ra ƒë·ªÉ C·∫≠u c√≥ th·ªÉ hi·ªÉu ƒë∆∞·ª£c t√¨nh c·∫£m c·ªßa T·ªõ d√†nh cho C·∫≠u.
  
  Th√∫y n√®, trong kho·∫£ng th·ªùi gian m√¨nh quen nhau t·ªõ c·∫£m th·∫•y r·∫•t vui v√† h·∫°nh ph√∫c v√¨ l√¢u l·∫Øm r·ªìi t·ªõ m·ªõi th·∫•y m√¨nh y√™u 1 ai nhi·ªÅu ƒë·∫øn nh∆∞ v·∫≠y, ƒë·∫∑c bi·ªát ng∆∞·ªùi ƒë√≥ l·∫°i l√† C·∫≠u. M·ªói l·∫ßn ƒë∆∞·ª£c g·∫∑p C·∫≠u l√† T·ªõ vui l·∫Øm, t·ªõ c·∫£m nh·∫≠n nh∆∞ m√¨nh ƒë√£ t√¨m ƒë∆∞·ª£c 1 n·ª≠a t√¨nh y√™u c√≤n l·∫°i c·ªßa m√¨nh r·ªìi √Ω.
  
  T·ªõ v·∫´n hay n√≥i l√†: T·ªõ kh√¥ng bi·∫øt c·∫£m x√∫c c·ªßa C·∫≠u ƒë·ªëi v·ªõi t·ªõ nh∆∞ th·∫ø n√†o, nh∆∞ng hi·ªán t·∫°i T·ªõ r·∫•t Y√™u C·∫≠u. G·∫∑p ƒë∆∞·ª£c C·∫≠u nh∆∞ 1 gi·∫•c m∆° ƒë·ªëi v·ªõi T·ªõ v·∫≠y h·∫π h·∫π.
  
  Nhi·ªÅu khi T·ªõ nghƒ© m√¨nh may m·∫Øn l·∫Øm m·ªõi g·∫∑p ƒë∆∞·ª£c c·∫≠u lu√¥n √Ω. H∆°i d√†i d√≤ng qu√° Tu·∫•n √™, n√™n l√† T·ªõ Ch·ªâ mu·ªën n√≥i r·∫±ng T·ªõ Y√™u C·∫≠u r·∫•t nhi·ªÅu, Y√™u m·ªçi th·ª© v·ªÅ C·∫≠u!!`,
  
  "T·ªõ ch√∫c c·∫≠u lu√¥n l√† b√¥ng hoa xinh ƒë·∫πp nh·∫•t, r·∫°ng r·ª° nh·∫•t.V√¨ nay l√† th√°ng 10 n√™n n·ª• c∆∞·ªùi c·ªßa c·∫≠u ƒë·∫πp nh∆∞ Th·ªß ƒê√¥ ng√†y gi·∫£i ph√≥ng v·∫≠y, v√¨ n·ª• c∆∞·ªùi c·ªßa c·∫≠u l√†m b·ª´ng s√°ng c·∫£ th·∫ø gi·ªõi c·ªßa t·ªõ.",
];

const GRATITUDE_LINES = [
    "C·∫£m ∆°n c·∫≠u ƒë√£ xu·∫•t hi·ªán trong cu·ªôc ƒë·ªùi c·ªßa t·ªõ,",
    "C·∫£m ∆°n c·∫≠u ƒë√£ ƒë·∫øn v√† cho t·ªõ nh·ªØng ni·ªÅm vui.",
];

const LEAD_IN_LINES = [
    "V√† ch·ª´ng ƒë·∫•y th·ªùi gian kh√¥ng qu√° ng·∫Øn v√† c≈©ng kh√¥ng qu√° d√†i,ƒê·ªÉ cho t·ªõ c·∫£m nh·∫≠n ƒë∆∞·ª£c t√¨nh c·∫£m m√† T·ªõ d√†nh cho C·∫≠u v√† T·ªõ c≈©ng c·∫£m th·∫•y t·ªõ r·∫•t c·∫ßn c·∫≠u trong cu·ªôc s·ªëng n√†y ",
];

const CONFESSION_TEXT = "ƒêi·ªÅu quan tr·ªçng nh·∫•t m√† t·ªõ mu·ªën n√≥i l√†...";
const FINAL_QUESTION = "L√†m ng∆∞·ªùi y√™u c·ªßa t·ªõ nh√©? Cho t·ªõ 1 c∆° h·ªôi ƒë·ªÉ c√≥ th·ªÉ y√™u th∆∞∆°ng, che ch·ªü, quan t√¢m v√† chƒÉm s√≥c c·∫≠u nh√© ?";
// --- K·∫æT TH√öC ---

const ConfessionPage = () => {
  const [step, setStep] = useState(1);
  const [lineIndex, setLineIndex] = useState(0);
  // S·ª≠ d·ª•ng state m·ªõi ƒë·ªÉ qu·∫£n l√Ω 3 tr·∫°ng th√°i: null, 'agreed', 'waiting'
  const [responseState, setResponseState] = useState(null); 
  const [noButtonStyle, setNoButtonStyle] = useState({});
  const [yesButtonSize, setYesButtonSize] = useState(1);
  const videoRef = useRef(null);
  const [isMuted, setIsMuted] = useState(true);
  const buttonGroupRef = useRef(null);
  const noButtonRef = useRef(null);
  const heartRainContainerRef = useRef(null);

  useEffect(() => {
    if (heartRainContainerRef.current) {
      const numHearts = 30;
      const container = heartRainContainerRef.current;
      container.innerHTML = ''; 
      for (let i = 0; i < numHearts; i++) {
        const heart = document.createElement('div');
        heart.className = 'falling-heart';
        heart.style.left = `${Math.random() * 100}%`;
        const size = Math.random() * 10 + 10;
        heart.style.width = `${size}px`;
        heart.style.height = `${size}px`;
        heart.style.animationDelay = `${Math.random() * 5}s`;
        heart.style.animationDuration = `${Math.random() * 5 + 5}s`;
        container.appendChild(heart);
      }
    }
  }, []);

  const handleNext = () => {
    let currentStepLines;
    switch(step) {
        case 1: currentStepLines = OPENING_LINES; break;
        case 2: currentStepLines = WISHES; break;
        case 3: currentStepLines = GRATITUDE_LINES; break;
        case 5: currentStepLines = LEAD_IN_LINES; break;
        default: currentStepLines = [];
    }
    if (step === 4) {
        setStep(5);
        setLineIndex(0);
        return;
    }
    if (lineIndex < currentStepLines.length - 1) {
      setLineIndex(lineIndex + 1);
    } else {
      setStep(step + 1);
      setLineIndex(0);
    }
  };

  const handleNoClick = () => {
    setYesButtonSize(prevSize => prevSize + 0.2);
    if (buttonGroupRef.current && noButtonRef.current) {
      const buttonGroupRect = buttonGroupRef.current.getBoundingClientRect();
      const noButtonRect = noButtonRef.current.getBoundingClientRect();
      let newX = Math.random() * (buttonGroupRect.width - noButtonRect.width);
      let newY = Math.random() * (buttonGroupRect.height - noButtonRect.height);
      setNoButtonStyle({
        position: 'absolute',
        left: `${newX}px`,
        top: `${newY}px`,
        transition: 'all 0.3s ease',
      });
    }
  };

  const handleYesClick = () => setResponseState('agreed');
  const handleWaitingClick = () => setResponseState('waiting'); // H√†m m·ªõi

  const toggleMute = () => {
    if (videoRef.current) {
      const video = videoRef.current;
      video.muted = !video.muted;
      setIsMuted(video.muted);
    }
  };

  const renderContent = () => {
    if (responseState === 'agreed') {
      return (
        <div className="container agreed-view">
          <Confetti width={window.innerWidth} height={window.innerHeight} />
          <h1 className="fade-in">YAY! T·ªõ c≈©ng y√™u c·∫≠u nhi·ªÅu l·∫Øm! ‚ù§Ô∏è</h1>
          <img src="/em1.jpg" alt="K·ª∑ ni·ªám ƒë·∫πp" className="memory-image fade-in" />
        </div>
      );
    }
    
    // M√†n h√¨nh m·ªõi khi b·∫•m "Ch∆∞a s·∫µn s√†ng"
    if (responseState === 'waiting') {
      return (
        <div className="container waiting-view">
          <h1 className="fade-in">Kh√¥ng sao ƒë√¢u... Í¥úÏ∞ÆÏïÑ</h1>
          <h2 className="fade-in">T·ªõ s·∫Ω ƒë·ª£i c·∫≠u ƒë·∫øn khi n√†o c·∫≠u s·∫µn s√†ng.</h2>
        </div>
      );
    }

    switch (step) {
      case 1:
        return (
          <div className="card fade-in">
            <p className="story-text">{OPENING_LINES[lineIndex]}</p>
            <button className="next-button" onClick={handleNext}>Ti·∫øp t·ª•c...</button>
          </div>
        );
      case 2:
        return (
          <div className="card fade-in">
            <p className="story-text">{WISHES[lineIndex]}</p>
            <button className="next-button" onClick={handleNext}>Ti·∫øp t·ª•c...</button>
          </div>
        );
      case 3:
        return (
          <div className="card fade-in">
            <p className="story-text">{GRATITUDE_LINES[lineIndex]}</p>
            <button className="next-button" onClick={handleNext}>
              {lineIndex === GRATITUDE_LINES.length - 1 ? "V√†..." : "Ti·∫øp t·ª•c..."}
            </button>
          </div>
        );
      case 4:
        return (
          <div className="card fade-in">
            <p className="story-text">V√† nh·ªØng kho·∫£nh kh·∫Øc tuy·ªát v·ªùi n√†y...</p>
            <div className="video-container">
              <video ref={videoRef} className="memory-video" src="/kiniem1.mp4" autoPlay muted loop playsInline>
                Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video n√†y.
              </video>
              <button onClick={toggleMute} className="mute-button">
                {isMuted ? 'üîà B·∫≠t ti·∫øng' : 'üîä T·∫Øt ti·∫øng'}
              </button>
            </div>
            <button className="next-button" onClick={handleNext}>‚ù§Ô∏è</button>
          </div>
        );
      case 5:
        return (
            <div className="card fade-in">
              <p className="story-text">{LEAD_IN_LINES[lineIndex]}</p>
              <button className="next-button" onClick={handleNext}>
                {lineIndex === LEAD_IN_LINES.length - 1 ? "N√™n l√†..." : "Ti·∫øp t·ª•c..."}
              </button>
            </div>
          );
      case 6:
        return (
          <div className="card fade-in">
            <h1>{CONFESSION_TEXT}</h1>
            <h2>{FINAL_QUESTION}</h2>
            <div className="button-group" ref={buttonGroupRef}>
              <button
                className="yes-button"
                style={{ transform: `scale(${yesButtonSize})` }}
                onClick={handleYesClick}
              >
                ƒê·ªìng √Ω ü•∞
              </button>
              {/* N√∫t m·ªõi ƒë∆∞·ª£c th√™m v√†o */}
              <button
                className="waiting-button"
                onClick={handleWaitingClick}
              >
                T·ªõ ch∆∞a s·∫µn s√†ng...
              </button>
              <button
                ref={noButtonRef}
                className="no-button"
                style={noButtonStyle}
                onMouseEnter={handleNoClick}
                onClick={handleNoClick}
              >
                Kh√¥ng nha üòú
              </button>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="container">
      {renderContent()}
      <div ref={heartRainContainerRef} className="heart-rain-container"></div>
    </div>
  );
};

export default ConfessionPage;
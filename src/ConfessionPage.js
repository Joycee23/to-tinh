import React, { useState, useEffect, useRef } from 'react';
import Confetti from 'react-confetti';
import './ConfessionPage.css'; // ƒê·∫£m b·∫£o b·∫°n c√≥ file CSS n√†y

// --- N·ªòI DUNG T√ôY CH·ªàNH ---
const OPENING_LINES = [
  "Ch√†o c·∫≠u...",
  "H√¥m nay l√† m·ªôt ng√†y ƒë·∫∑c bi·ªát.",
  "V√† t·ªõ c√≥ ƒëi·ªÅu n√†y mu·ªën n√≥i v·ªõi c·∫≠u...",
];

const WISHES = [
  "Nh√¢n ng√†y 20/10,",
  "T·ªõ ch√∫c c·∫≠u lu√¥n l√† b√¥ng hoa xinh ƒë·∫πp nh·∫•t, r·∫°ng r·ª° nh·∫•t.",
  "V√¨ nay l√† th√°ng 10 n√™n n·ª• c∆∞·ªùi c·ªßa c·∫≠u ƒë·∫πp nh∆∞ Th·ªß ƒê√¥ ng√†y gi·∫£i ph√≥ng v·∫≠y.",
  "V√¨ n·ª• c∆∞·ªùi c·ªßa c·∫≠u l√†m b·ª´ng s√°ng c·∫£ th·∫ø gi·ªõi c·ªßa t·ªõ.",
];

const GRATITUDE_LINES = [
    "C·∫£m ∆°n c·∫≠u ƒë√£ xu·∫•t hi·ªán trong cu·ªôc ƒë·ªùi c·ªßa t·ªõ,",
    "C·∫£m ∆°n c·∫≠u ƒë√£ ƒë·∫øn v√† cho t·ªõ nh·ªØng ni·ªÅm vui.",
];

const LEAD_IN_LINES = [
    "V√† ch·ª´ng ƒë·∫•y th·ªùi gian kh√¥ng qu√° ng·∫Øn v√† c≈©ng kh√¥ng qu√° d√†i,",
    "ƒê·ªÉ cho t·ªõ c·∫£m th·∫•y t·ªõ r·∫•t c·∫ßn c·∫≠u trong cu·ªôc s·ªëng n√†y.",
];

const CONFESSION_TEXT = "ƒêi·ªÅu quan tr·ªçng nh·∫•t m√† t·ªõ mu·ªën n√≥i l√†...";
const FINAL_QUESTION = "L√†m ng∆∞·ªùi y√™u c·ªßa t·ªõ nh√©?";
// --- K·∫æT TH√öC ---

const ConfessionPage = () => {
  const [step, setStep] = useState(1);
  const [lineIndex, setLineIndex] = useState(0);
  const [agreed, setAgreed] = useState(false);
  const [noButtonStyle, setNoButtonStyle] = useState({});
  const [yesButtonSize, setYesButtonSize] = useState(1);
  const videoRef = useRef(null);
  const [isMuted, setIsMuted] = useState(true);
  const buttonGroupRef = useRef(null);
  const noButtonRef = useRef(null);
  
  // Ref cho container ch·ª©a m∆∞a tr√°i tim
  const heartRainContainerRef = useRef(null);

  // useEffect ƒë·ªÉ t·∫°o m∆∞a tr√°i tim m·ªôt l·∫ßn duy nh·∫•t khi component ƒë∆∞·ª£c t·∫£i
  useEffect(() => {
    if (heartRainContainerRef.current) {
      const numHearts = 30; // S·ªë l∆∞·ª£ng tr√°i tim
      const container = heartRainContainerRef.current;
      container.innerHTML = ''; 

      for (let i = 0; i < numHearts; i++) {
        const heart = document.createElement('div');
        heart.className = 'falling-heart';
        
        heart.style.left = `${Math.random() * 100}%`;
        const size = Math.random() * 10 + 10;
        heart.style.width = `${size}px`;
        heart.style.height = `${size}px`;
        heart.style.animationDelay = `${Math.random() * 5}s`;
        heart.style.animationDuration = `${Math.random() * 5 + 5}s`;

        container.appendChild(heart);
      }
    }
  }, []); // M·∫£ng r·ªóng ƒë·∫£m b·∫£o hi·ªáu ·ª©ng ch·ªâ t·∫°o 1 l·∫ßn

  const handleNext = () => {
    let currentStepLines;
    switch(step) {
        case 1: currentStepLines = OPENING_LINES; break;
        case 2: currentStepLines = WISHES; break;
        case 3: currentStepLines = GRATITUDE_LINES; break;
        case 5: currentStepLines = LEAD_IN_LINES; break;
        default: currentStepLines = [];
    }

    if (step === 4) {
        setStep(5);
        setLineIndex(0);
        return;
    }

    if (lineIndex < currentStepLines.length - 1) {
      setLineIndex(lineIndex + 1);
    } else {
      setStep(step + 1);
      setLineIndex(0);
    }
  };

  const handleNoClick = () => {
    setYesButtonSize(prevSize => prevSize + 0.2);
    if (buttonGroupRef.current && noButtonRef.current) {
      const buttonGroupRect = buttonGroupRef.current.getBoundingClientRect();
      const noButtonRect = noButtonRef.current.getBoundingClientRect();
      let newX = Math.random() * (buttonGroupRect.width - noButtonRect.width);
      let newY = Math.random() * (buttonGroupRect.height - noButtonRect.height);
      setNoButtonStyle({
        position: 'absolute',
        left: `${newX}px`,
        top: `${newY}px`,
        transition: 'all 0.3s ease',
      });
    }
  };

  const handleYesClick = () => setAgreed(true);

  const toggleMute = () => {
    if (videoRef.current) {
      const video = videoRef.current;
      video.muted = !video.muted;
      setIsMuted(video.muted);
    }
  };

  const renderContent = () => {
    if (agreed) {
      return (
        <div className="container agreed-view">
          <Confetti width={window.innerWidth} height={window.innerHeight} />
          <h1 className="fade-in">YAY! T·ªõ c≈©ng y√™u c·∫≠u nhi·ªÅu l·∫Øm! ‚ù§Ô∏è</h1>
          <img src="/em1.jpg" alt="K·ª∑ ni·ªám ƒë·∫πp" className="memory-image fade-in" />
        </div>
      );
    }

    // C√°c case gi·ªØ nguy√™n
    switch (step) {
      case 1:
        return (
          <div className="card fade-in">
            <p className="story-text">{OPENING_LINES[lineIndex]}</p>
            <button className="next-button" onClick={handleNext}>Ti·∫øp t·ª•c...</button>
          </div>
        );
      case 2:
        return (
          <div className="card fade-in">
            <p className="story-text">{WISHES[lineIndex]}</p>
            <button className="next-button" onClick={handleNext}>Ti·∫øp t·ª•c...</button>
          </div>
        );
      case 3:
        return (
          <div className="card fade-in">
            <p className="story-text">{GRATITUDE_LINES[lineIndex]}</p>
            <button className="next-button" onClick={handleNext}>
                {lineIndex === GRATITUDE_LINES.length - 1 ? "V√†..." : "Ti·∫øp t·ª•c..."}
            </button>
          </div>
        );
      case 4:
        return (
          <div className="card fade-in">
            <p className="story-text">V√† nh·ªØng kho·∫£nh kh·∫Øc tuy·ªát v·ªùi n√†y...</p>
            <div className="video-container">
              <video
                ref={videoRef}
                className="memory-video"
                src="/kiniem1.mp4"
                autoPlay
                muted
                loop
                playsInline
              >
                Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video n√†y.
              </video>
              <button onClick={toggleMute} className="mute-button">
                {isMuted ? 'üîà B·∫≠t ti·∫øng' : 'üîä T·∫Øt ti·∫øng'}
              </button>
            </div>
            <button className="next-button" onClick={handleNext}>‚ù§Ô∏è</button>
          </div>
        );
      case 5:
        return (
            <div className="card fade-in">
              <p className="story-text">{LEAD_IN_LINES[lineIndex]}</p>
              <button className="next-button" onClick={handleNext}>
                {lineIndex === LEAD_IN_LINES.length - 1 ? "N√™n l√†..." : "Ti·∫øp t·ª•c..."}
              </button>
            </div>
          );
      case 6:
        return (
          <div className="card fade-in">
            <h1>{CONFESSION_TEXT}</h1>
            <h2>{FINAL_QUESTION}</h2>
            <div className="button-group" ref={buttonGroupRef}>
              <button
                className="yes-button"
                style={{ transform: `scale(${yesButtonSize})` }}
                onClick={handleYesClick}
              >
                ƒê·ªìng √Ω ü•∞
              </button>
              <button
                ref={noButtonRef}
                className="no-button"
                style={noButtonStyle}
                onMouseEnter={handleNoClick}
                onClick={handleNoClick}
              >
                Kh√¥ng nha üòú
              </button>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    // Th√™m container c·ªßa m∆∞a tr√°i tim v√†o ƒë√¢y
    <div className="container">
      {renderContent()}
      <div ref={heartRainContainerRef} className="heart-rain-container"></div>
    </div>
  );
};

export default ConfessionPage;